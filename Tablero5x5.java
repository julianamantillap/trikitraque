/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trikitraki;

import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author julianamantilla
 */
public class Tablero5x5 extends javax.swing.JFrame {
    
     private juego j;
    private Color colorjugadorX;
    private Color colorjugadorO;
    private char turno;
    private Color actual;

    /**
     * Creates new form Tablero5x5
     */
    public Tablero5x5(juego jue) {
       initComponents();
        this.j = jue;
        if (this.j.getX().getColor().equals("Rojo")) {
            colorjugadorX = Color.red;
            colorjugadorO = Color.blue;
        } else {
            colorjugadorX = Color.blue;
            colorjugadorO = Color.red;
        }
        turno = 'X';
        actual = posicion00.getBackground();
    }

    private Tablero5x5() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel5x5 = new javax.swing.JPanel();
        Jugadas = new javax.swing.JTextField();
        posicion00 = new javax.swing.JButton();
        posicion01 = new javax.swing.JButton();
        posicion02 = new javax.swing.JButton();
        posicion12 = new javax.swing.JButton();
        posicion11 = new javax.swing.JButton();
        posicion10 = new javax.swing.JButton();
        posicion20 = new javax.swing.JButton();
        posicion21 = new javax.swing.JButton();
        posicion23 = new javax.swing.JButton();
        posicion30 = new javax.swing.JButton();
        posicion31 = new javax.swing.JButton();
        posicion32 = new javax.swing.JButton();
        posicion03 = new javax.swing.JButton();
        posicion13 = new javax.swing.JButton();
        posicion22 = new javax.swing.JButton();
        posicion33 = new javax.swing.JButton();
        posicion04 = new javax.swing.JButton();
        posicion14 = new javax.swing.JButton();
        posicion24 = new javax.swing.JButton();
        posicion34 = new javax.swing.JButton();
        posicion40 = new javax.swing.JButton();
        posicion41 = new javax.swing.JButton();
        posicion42 = new javax.swing.JButton();
        posicion43 = new javax.swing.JButton();
        posicion44 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panel5x5.setBackground(new java.awt.Color(255, 153, 153));
        panel5x5.setAlignmentX(1.0F);
        panel5x5.setAlignmentY(1.0F);
        panel5x5.setEnabled(false);

        Jugadas.setEditable(false);
        Jugadas.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        posicion00.setBackground(new java.awt.Color(255, 204, 204));
        posicion00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion00ActionPerformed(evt);
            }
        });

        posicion01.setBackground(new java.awt.Color(255, 204, 204));
        posicion01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion01ActionPerformed(evt);
            }
        });

        posicion02.setBackground(new java.awt.Color(255, 204, 204));
        posicion02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion02ActionPerformed(evt);
            }
        });

        posicion12.setBackground(new java.awt.Color(255, 204, 204));
        posicion12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion12ActionPerformed(evt);
            }
        });

        posicion11.setBackground(new java.awt.Color(255, 204, 204));
        posicion11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion11ActionPerformed(evt);
            }
        });

        posicion10.setBackground(new java.awt.Color(255, 204, 204));
        posicion10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion10ActionPerformed(evt);
            }
        });

        posicion20.setBackground(new java.awt.Color(255, 204, 204));
        posicion20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion20ActionPerformed(evt);
            }
        });

        posicion21.setBackground(new java.awt.Color(255, 204, 204));
        posicion21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion21ActionPerformed(evt);
            }
        });

        posicion23.setBackground(new java.awt.Color(255, 204, 204));
        posicion23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion23ActionPerformed(evt);
            }
        });

        posicion30.setBackground(new java.awt.Color(255, 204, 204));
        posicion30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion30ActionPerformed(evt);
            }
        });

        posicion31.setBackground(new java.awt.Color(255, 204, 204));
        posicion31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion31ActionPerformed(evt);
            }
        });

        posicion32.setBackground(new java.awt.Color(255, 204, 204));
        posicion32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion32ActionPerformed(evt);
            }
        });

        posicion03.setBackground(new java.awt.Color(255, 204, 204));
        posicion03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion03ActionPerformed(evt);
            }
        });

        posicion13.setBackground(new java.awt.Color(255, 204, 204));
        posicion13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion13ActionPerformed(evt);
            }
        });

        posicion22.setBackground(new java.awt.Color(255, 204, 204));
        posicion22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion22ActionPerformed(evt);
            }
        });

        posicion33.setBackground(new java.awt.Color(255, 204, 204));
        posicion33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion33ActionPerformed(evt);
            }
        });

        posicion04.setBackground(new java.awt.Color(255, 204, 204));
        posicion04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion04ActionPerformed(evt);
            }
        });

        posicion14.setBackground(new java.awt.Color(255, 204, 204));
        posicion14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion14ActionPerformed(evt);
            }
        });

        posicion24.setBackground(new java.awt.Color(255, 204, 204));
        posicion24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion24ActionPerformed(evt);
            }
        });

        posicion34.setBackground(new java.awt.Color(255, 204, 204));
        posicion34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion34ActionPerformed(evt);
            }
        });

        posicion40.setBackground(new java.awt.Color(255, 204, 204));
        posicion40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion40ActionPerformed(evt);
            }
        });

        posicion41.setBackground(new java.awt.Color(255, 204, 204));
        posicion41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion41ActionPerformed(evt);
            }
        });

        posicion42.setBackground(new java.awt.Color(255, 204, 204));
        posicion42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion42ActionPerformed(evt);
            }
        });

        posicion43.setBackground(new java.awt.Color(255, 204, 204));
        posicion43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion43ActionPerformed(evt);
            }
        });

        posicion44.setBackground(new java.awt.Color(255, 204, 204));
        posicion44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posicion44ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel5x5Layout = new javax.swing.GroupLayout(panel5x5);
        panel5x5.setLayout(panel5x5Layout);
        panel5x5Layout.setHorizontalGroup(
            panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5x5Layout.createSequentialGroup()
                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel5x5Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel5x5Layout.createSequentialGroup()
                                .addComponent(posicion40, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(posicion41, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(posicion42, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(posicion43, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(posicion44, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel5x5Layout.createSequentialGroup()
                                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panel5x5Layout.createSequentialGroup()
                                        .addComponent(posicion30, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(posicion31, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)
                                        .addComponent(posicion32, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panel5x5Layout.createSequentialGroup()
                                            .addComponent(posicion00, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(36, 36, 36)
                                            .addComponent(posicion01, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(32, 32, 32)
                                            .addComponent(posicion02, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panel5x5Layout.createSequentialGroup()
                                            .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(panel5x5Layout.createSequentialGroup()
                                                    .addComponent(posicion10, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(36, 36, 36)
                                                    .addComponent(posicion11, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(panel5x5Layout.createSequentialGroup()
                                                    .addComponent(posicion20, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(36, 36, 36)
                                                    .addComponent(posicion21, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(32, 32, 32)
                                            .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(posicion22, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(posicion12, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(27, 27, 27)
                                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(posicion03, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(posicion13, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(posicion23, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(posicion33, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(posicion04, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(posicion14, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(posicion24, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(posicion34, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(panel5x5Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(Jugadas, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        panel5x5Layout.setVerticalGroup(
            panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5x5Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(Jugadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel5x5Layout.createSequentialGroup()
                        .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(posicion02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(posicion00, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(posicion01, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(posicion03, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(posicion12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(posicion10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(posicion11, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(posicion13, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(posicion23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(posicion20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(posicion21, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(posicion22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel5x5Layout.createSequentialGroup()
                        .addComponent(posicion04, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(posicion14, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(posicion24, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(posicion32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(posicion30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(posicion31, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(posicion33, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(posicion34, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel5x5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(posicion42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(posicion40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(posicion41, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(posicion43, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(posicion44, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel5x5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel5x5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void posicion00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion00ActionPerformed

        int decision=3;

        if (posicion00.getText().isEmpty()) {
            if (turno == 'X') {
                posicion00.setText("X");
                posicion00.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(0, 0, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion00.setText("O");
                posicion00.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(0, 0, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion00ActionPerformed

    private void posicion01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion01ActionPerformed
        int decision=3;

        if (posicion01.getText().isEmpty()) {
            if (turno == 'X') {
                posicion01.setText("X");
                posicion01.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(0, 1, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion01.setText("O");
                posicion01.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(0, 1, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion01ActionPerformed

    private void posicion02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion02ActionPerformed
        int decision=3;

        if (posicion02.getText().isEmpty()) {
            if (turno == 'X') {
                posicion02.setText("X");
                posicion02.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(0, 2, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion02.setText("O");
                posicion02.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(0, 2, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion02ActionPerformed

    private void posicion12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion12ActionPerformed
        int decision=3;

        if (posicion12.getText().isEmpty()) {
            if (turno == 'X') {
                posicion12.setText("X");
                posicion12.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(1, 2, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion12.setText("O");
                posicion12.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(1, 2, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion12ActionPerformed

    private void posicion11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion11ActionPerformed
        int decision=3;

        if (posicion11.getText().isEmpty()) {
            if (turno == 'X') {
                posicion11.setText("X");
                posicion11.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(1, 1, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion11.setText("O");
                posicion11.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(1, 1, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion11ActionPerformed

    private void posicion10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion10ActionPerformed
        int decision=3;

        if (posicion10.getText().isEmpty()) {
            if (turno == 'X') {
                posicion10.setText("X");
                posicion10.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(1, 0, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion10.setText("O");
                posicion10.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(1, 0, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion10ActionPerformed

    private void posicion20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion20ActionPerformed
        int decision=3;

        if (posicion20.getText().isEmpty()) {
            if (turno == 'X') {
                posicion20.setText("X");
                posicion20.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(2, 0, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion20.setText("O");
                posicion20.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(2, 0, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion20ActionPerformed

    private void posicion21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion21ActionPerformed
        int decision=3;

        if (posicion21.getText().isEmpty()) {
            if (turno == 'X') {
                posicion21.setText("X");
                posicion21.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(2, 1, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion21.setText("O");
                posicion21.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(2, 1, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion21ActionPerformed

    private void posicion23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion23ActionPerformed
        int decision=3;

        if (posicion23.getText().isEmpty()) {
            if (turno == 'X') {
                posicion23.setText("X");
                posicion23.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(2, 3, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion23.setText("O");
                posicion23.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(2, 3, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion23ActionPerformed

    private void posicion30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion30ActionPerformed
        int decision=3;

        if (posicion30.getText().isEmpty()) {
            if (turno == 'X') {
                posicion30.setText("X");
                posicion30.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(3, 0, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion30.setText("O");
                posicion30.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(3, 0, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion30ActionPerformed

    private void posicion31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion31ActionPerformed
        int decision=3;

        if (posicion31.getText().isEmpty()) {
            if (turno == 'X') {
                posicion31.setText("X");
                posicion31.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(3, 1, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion31.setText("O");
                posicion31.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(3, 1, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion31ActionPerformed

    private void posicion32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion32ActionPerformed
        int decision=3;

        if (posicion32.getText().isEmpty()) {
            if (turno == 'X') {
                posicion32.setText("X");
                posicion32.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(3, 2, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion32.setText("O");
                posicion32.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(3, 2, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion32ActionPerformed

    private void posicion03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion03ActionPerformed
        int decision=3;

        if (posicion03.getText().isEmpty()) {
            if (turno == 'X') {
                posicion03.setText("X");
                posicion03.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(0, 3, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion03.setText("O");
                posicion03.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(0, 3, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion03ActionPerformed

    private void posicion13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion13ActionPerformed
        int decision=3;

        if (posicion13.getText().isEmpty()) {
            if (turno == 'X') {
                posicion13.setText("X");
                posicion13.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(1, 3, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion13.setText("O");
                posicion13.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(1, 3, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion13ActionPerformed

    private void posicion22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion22ActionPerformed
        int decision=3;

        if (posicion22.getText().isEmpty()) {
            if (turno == 'X') {
                posicion22.setText("X");
                posicion22.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(2, 2, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion22.setText("O");
                posicion22.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(2, 2, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion22ActionPerformed

    private void posicion33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion33ActionPerformed
        int decision=3;

        if (posicion33.getText().isEmpty()) {
            if (turno == 'X') {
                posicion33.setText("X");
                posicion33.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(3, 3, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion33.setText("O");
                posicion33.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(3, 3, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion33ActionPerformed

    private void posicion04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion04ActionPerformed
       int decision=3;

        if (posicion04.getText().isEmpty()) {
            if (turno == 'X') {
                posicion04.setText("X");
                posicion04.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(0, 4, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion04.setText("O");
                posicion04.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(0, 4, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion04ActionPerformed

    private void posicion14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion14ActionPerformed
      int decision=3;

        if (posicion14.getText().isEmpty()) {
            if (turno == 'X') {
                posicion14.setText("X");
                posicion14.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(1, 4, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion14.setText("O");
                posicion14.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(1, 4, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion14ActionPerformed

    private void posicion24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion24ActionPerformed
      int decision=3;

        if (posicion24.getText().isEmpty()) {
            if (turno == 'X') {
                posicion24.setText("X");
                posicion24.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(2, 4, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion24.setText("O");
                posicion24.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(2, 4, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion24ActionPerformed

    private void posicion34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion34ActionPerformed
        int decision=3;

        if (posicion34.getText().isEmpty()) {
            if (turno == 'X') {
                posicion34.setText("X");
                posicion34.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(3, 4, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion34.setText("O");
                posicion34.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(3, 4, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion34ActionPerformed

    private void posicion40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion40ActionPerformed
       int decision=3;

        if (posicion40.getText().isEmpty()) {
            if (turno == 'X') {
                posicion40.setText("X");
                posicion40.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(4, 0, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion40.setText("O");
                posicion40.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(4, 0, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion40ActionPerformed

    private void posicion41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion41ActionPerformed
      int decision=3;

        if (posicion41.getText().isEmpty()) {
            if (turno == 'X') {
                posicion41.setText("X");
                posicion41.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(4, 1, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion41.setText("O");
                posicion41.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(4, 1, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion41ActionPerformed

    private void posicion42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion42ActionPerformed
      int decision=3;

        if (posicion42.getText().isEmpty()) {
            if (turno == 'X') {
                posicion42.setText("X");
                posicion42.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(4, 2, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion42.setText("O");
                posicion42.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(4, 2, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion42ActionPerformed

    private void posicion43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion43ActionPerformed
      int decision=3;

        if (posicion43.getText().isEmpty()) {
            if (turno == 'X') {
                posicion43.setText("X");
                posicion43.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(4, 3, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion43.setText("O");
                posicion43.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(4, 3, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion43ActionPerformed

    private void posicion44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posicion44ActionPerformed
        int decision=3;

        if (posicion44.getText().isEmpty()) {
            if (turno == 'X') {
                posicion44.setText("X");
                posicion44.setBackground(colorjugadorX);

                int resultado = j.getT().colocarFicha(4, 4, 'X');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: O");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha  X, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            } else {
                posicion44.setText("O");
                posicion44.setBackground(colorjugadorO);

                int resultado = j.getT().colocarFicha(4, 4, 'O');

                if (resultado == 0) {
                    Jugadas.setText("Ficha Proxima a Jugar: X");
                    turno = j.cambiarTurno(turno);
                } else if (resultado == 1) {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Ha ganado el jugador con la ficha O, ¿desea competir de nuevo?");
                } else {
                    Jugadas.setText("Partida Terminada");
                    j.finalizarPartida();

                    decision = JOptionPane.showInternalConfirmDialog(null, "Partida Empatada, ¿desea competir de nuevo?");
                }
            }

            if(decision==0)
            reiniciar();
            else if(decision==1 || decision==2)
            this.dispose();
        }
    }//GEN-LAST:event_posicion44ActionPerformed

    private void reiniciar() {

        Jugadas.setText("");
        posicion00.setText("");
        posicion00.setBackground(actual);
        posicion01.setText("");
        posicion01.setBackground(actual);
        posicion02.setText("");
        posicion02.setBackground(actual);
        posicion03.setText("");
        posicion03.setBackground(actual);
        posicion04.setText("");
        posicion04.setBackground(actual);
        posicion10.setText("");
        posicion10.setBackground(actual);
        posicion11.setText("");
        posicion11.setBackground(actual);
        posicion12.setText("");
        posicion12.setBackground(actual);
        posicion13.setText("");
        posicion13.setBackground(actual);
        posicion14.setText("");
        posicion14.setBackground(actual);
        posicion20.setText("");
        posicion20.setBackground(actual);
        posicion21.setText("");
        posicion21.setBackground(actual);
        posicion22.setText("");
        posicion22.setBackground(actual);
        posicion23.setText("");
        posicion23.setBackground(actual);
        posicion24.setText("");
        posicion24.setBackground(actual);
        posicion30.setText("");
        posicion30.setBackground(actual);
        posicion31.setText("");
        posicion31.setBackground(actual);
        posicion32.setText("");
        posicion32.setBackground(actual);
        posicion33.setText("");
        posicion33.setBackground(actual);
        posicion34.setText("");
        posicion34.setBackground(actual);
        posicion40.setText("");
        posicion40.setBackground(actual);
        posicion41.setText("");
        posicion41.setBackground(actual);
        posicion42.setText("");
        posicion42.setBackground(actual);
        posicion43.setText("");
        posicion43.setBackground(actual);

    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero5x5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero5x5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero5x5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero5x5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero5x5().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Jugadas;
    private javax.swing.JPanel panel5x5;
    private javax.swing.JButton posicion00;
    private javax.swing.JButton posicion01;
    private javax.swing.JButton posicion02;
    private javax.swing.JButton posicion03;
    private javax.swing.JButton posicion04;
    private javax.swing.JButton posicion10;
    private javax.swing.JButton posicion11;
    private javax.swing.JButton posicion12;
    private javax.swing.JButton posicion13;
    private javax.swing.JButton posicion14;
    private javax.swing.JButton posicion20;
    private javax.swing.JButton posicion21;
    private javax.swing.JButton posicion22;
    private javax.swing.JButton posicion23;
    private javax.swing.JButton posicion24;
    private javax.swing.JButton posicion30;
    private javax.swing.JButton posicion31;
    private javax.swing.JButton posicion32;
    private javax.swing.JButton posicion33;
    private javax.swing.JButton posicion34;
    private javax.swing.JButton posicion40;
    private javax.swing.JButton posicion41;
    private javax.swing.JButton posicion42;
    private javax.swing.JButton posicion43;
    private javax.swing.JButton posicion44;
    // End of variables declaration//GEN-END:variables
}
